syntax = "proto2";
package proto;

enum ValueType {
  invaild  = 0;
  nil      = 1;
  string   = 2;
  int      = 3;
  uint     = 4;
  float    = 5;
}

message value {
    required ValueType type    = 1;
    optional int64     i       = 2;
    optional uint64    u       = 3;
    optional double    f       = 4;
    optional string    s       = 5;
}

message field {
    optional string name  = 1;
    optional value  v     = 2;
}

message ping_req {
  optional int64 timestamp = 1; 
}

message ping_resp {
  optional int64 timestamp = 2;
}

///get系列命令


//获取记录的指定字段
message get_req {
   required int64  seqno   = 1;
   required string table   = 2;
   required string key     = 3;
   repeated string fields  = 4;
}

message get_resp {
   required int64  seqno   = 1;
   required int32  errCode = 2;
   optional int64  version = 3;    
   repeated field  fields  = 4;
}

//获取记录的所有字段
message get_all_req {
  required int64  seqno   = 1;
  required string table   = 2;
  required string key     = 3;
}

message get_all_resp {
   required int64  seqno   = 1;
   required int32  errCode = 2;
   optional int64  version = 3;    
   repeated field  fields  = 4;
}

//更改系列命令

/*
*  设置记录的指定字段，如果version被指定则只有当存储数据的版本号与指定的version一致时才执行设置
*  (注:未指定版本好的情况下，如果记录不存在则新增记录，新增记录时如果有未设定的字段，将会用设定的默认值初始化)
*/
message set_req {
    required int64  seqno   = 1;
    optional int64  version = 2;    
    required string table   = 3;
    required string key     = 4;
    repeated field  fields  = 5;
}

message set_resp {
    required int64 seqno   = 1;
    required int32 errCode = 2;
    optional int64 version = 3; 
}

/*
*  与set指令类似，只有当记录不存在时才能成功设置
*/
message set_nx_req {
  required int64  seqno   = 1;    
  required string table   = 2;
  required string key     = 3;
  repeated field  fields  = 4;
}

message set_nx_resp {
  required int64 seqno   = 1;
  required int32 errCode = 2;
  optional int64 version = 3; 
}


/*
*  将记录的field.name字段增加field.value,并返回增加后的值(field.value只支持int类型，如果记录不存在会用
*  记录的默认值初始化记录，int类型默认值为0，并在此基础上增加)  
*/
message incr_by_req {
   required int64  seqno   = 1;
   required string table   = 2;
   required string key     = 3;
   required field  field   = 4;  
}

message incr_by_resp {
  required int64  seqno    = 1;  
  required int32  errCode  = 2;
  optional int64  version  = 3;
  optional field  newValue = 4;
}

/*
*  将记录的field.name字段减少field.value,并返回减少后的值(field.value只支持int类型，如果记录不存在会用
*  记录的默认值初始化记录，int类型默认值为0，并在此基础上减少)  
*/
message decr_by_req {
  required int64  seqno   = 1;
  required string table   = 2;
  required string key     = 3;
  required field  field   = 4;  
}

message decr_by_resp {
  required int64  seqno    = 1;  
  required int32  errCode  = 2;
  optional int64  version  = 3; 
  optional field  newValue = 4;
}

/*
*  如果记录存在且old.name的值与old.value相等，将其设定为new.value
*  只要记录存在，无论替换是否成功都将返回old.name的当前值。     
*/
message compare_and_set_req {
  required int64  seqno   = 1;
  required string table   = 2;
  required string key     = 3;
  required field  new     = 4;
  required field  old     = 5;  
}

message compare_and_set_resp {
  required int64  seqno    = 1;  
  required int32  errCode  = 2;
  optional int64  version  = 3;  
  optional field  value    = 4;  
}

/*
*  如果记录不存在，或old.name的值与old.value相等，将其设定为new.value
*  无论替换是否成功都将返回old.name的当前值。(注意:如果记录不存在，old.name以外的字段将被设置为初始值)
*/ 
message compare_and_set_nx_req {
  required int64  seqno   = 1;
  required string table   = 2;
  required string key     = 3;
  required field  new     = 4;
  required field  old     = 5;  
}

message compare_and_set_nx_resp {
  required int64  seqno    = 1;  
  required int32  errCode  = 2;
  optional int64  version  = 3;  
  optional field  value    = 4;  
}


//删除命令(只支持删除整个记录，不支持删除记录的字段)
message del_req {
    required int64  seqno   = 1;
    optional int64  version = 2;
    required string table   = 3;
    required string key     = 4;
}

message del_resp {
    required int64  seqno    = 1;
    required int32  errCode  = 2;
    optional int64  version  = 3; 
}


message row {
  repeated fields field   = 1;
}


message scan_req {
  required int64  seqno   = 1;
  optional int64  scaner  = 2;  
  required string table   = 3;  
  repeated fields string  = 4;
}

message scan_resp {
  required int64  seqno    = 1;
  required int32  errCode  = 2;
  optional int64  scaner   = 3;
  repeated row    rows     = 4;  
}



