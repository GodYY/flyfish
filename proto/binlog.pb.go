// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: binlog.proto

package proto

import (
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SqlType int32

const (
	SqlType_insert SqlType = 1
	SqlType_update SqlType = 2
	SqlType_delete SqlType = 3
)

var SqlType_name = map[int32]string{
	1: "insert",
	2: "update",
	3: "delete",
}

var SqlType_value = map[string]int32{
	"insert": 1,
	"update": 2,
	"delete": 3,
}

func (x SqlType) Enum() *SqlType {
	p := new(SqlType)
	*p = x
	return p
}

func (x SqlType) String() string {
	return proto.EnumName(SqlType_name, int32(x))
}

func (x *SqlType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SqlType_value, data, "SqlType")
	if err != nil {
		return err
	}
	*x = SqlType(value)
	return nil
}

func (SqlType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{0}
}

type BinRecord struct {
	Type                 *SqlType `protobuf:"varint,1,req,name=type,enum=proto.SqlType" json:"type,omitempty"`
	Table                *string  `protobuf:"bytes,2,req,name=table" json:"table,omitempty"`
	Key                  *string  `protobuf:"bytes,3,req,name=key" json:"key,omitempty"`
	WritebackVersion     *int64   `protobuf:"varint,4,req,name=writebackVersion" json:"writebackVersion,omitempty"`
	Fields               []*Field `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinRecord) Reset()         { *m = BinRecord{} }
func (m *BinRecord) String() string { return proto.CompactTextString(m) }
func (*BinRecord) ProtoMessage()    {}
func (*BinRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{0}
}
func (m *BinRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinRecord.Merge(m, src)
}
func (m *BinRecord) XXX_Size() int {
	return m.Size()
}
func (m *BinRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BinRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BinRecord proto.InternalMessageInfo

func (m *BinRecord) GetType() SqlType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SqlType_insert
}

func (m *BinRecord) GetTable() string {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return ""
}

func (m *BinRecord) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *BinRecord) GetWritebackVersion() int64 {
	if m != nil && m.WritebackVersion != nil {
		return *m.WritebackVersion
	}
	return 0
}

func (m *BinRecord) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.SqlType", SqlType_name, SqlType_value)
	proto.RegisterType((*BinRecord)(nil), "proto.binRecord")
}

func init() { proto.RegisterFile("binlog.proto", fileDescriptor_07ff5a43190a1b8c) }

var fileDescriptor_07ff5a43190a1b8c = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8e, 0x41, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x4d, 0xd2, 0xa9, 0xf4, 0xb5, 0x94, 0x10, 0x5c, 0x04, 0x17, 0xc3, 0x50, 0x5c, 0x0c,
	0x05, 0xbb, 0xe8, 0x11, 0x3c, 0x42, 0x14, 0xf7, 0x33, 0xcd, 0x53, 0x42, 0x43, 0x12, 0x33, 0x11,
	0x99, 0x9b, 0x78, 0x05, 0x6f, 0xe2, 0xd2, 0x23, 0xc8, 0x78, 0x11, 0x99, 0xcc, 0xec, 0xba, 0xfa,
	0xbf, 0xf7, 0xfd, 0x0f, 0xde, 0x83, 0x4d, 0x6b, 0x9c, 0xf5, 0xaf, 0x87, 0x10, 0x7d, 0xf2, 0xa2,
	0xc8, 0x71, 0xbb, 0xce, 0x31, 0xb9, 0xdd, 0x17, 0x81, 0x55, 0x6b, 0x9c, 0xc2, 0x93, 0x8f, 0x5a,
	0xec, 0x60, 0x91, 0xfa, 0x80, 0x92, 0x54, 0xb4, 0xde, 0x1e, 0xb7, 0xd3, 0xce, 0xe1, 0xf1, 0xcd,
	0x3e, 0xf5, 0x01, 0x55, 0xee, 0xc4, 0x0d, 0x14, 0xa9, 0x69, 0x2d, 0x4a, 0x5a, 0xd1, 0x7a, 0xa5,
	0xa6, 0x41, 0x70, 0x60, 0x67, 0xec, 0x25, 0xcb, 0x6e, 0x44, 0xb1, 0x07, 0xfe, 0x11, 0x4d, 0xc2,
	0xb6, 0x39, 0x9d, 0x9f, 0x31, 0x76, 0xc6, 0x3b, 0xb9, 0xa8, 0x68, 0xcd, 0xd4, 0x85, 0x17, 0x77,
	0xb0, 0x7c, 0x31, 0x68, 0x75, 0x27, 0x8b, 0x8a, 0xd5, 0xeb, 0xe3, 0x66, 0xbe, 0x9c, 0xa5, 0x9a,
	0xbb, 0xfd, 0x3d, 0x5c, 0xcf, 0xaf, 0x08, 0x80, 0xa5, 0x71, 0x1d, 0xc6, 0xc4, 0xc9, 0xc8, 0xef,
	0x41, 0x37, 0x09, 0x39, 0x1d, 0x59, 0xa3, 0xc5, 0x84, 0x9c, 0x3d, 0xf0, 0xef, 0xa1, 0x24, 0x3f,
	0x43, 0x49, 0x7e, 0x87, 0x92, 0x7c, 0xfe, 0x95, 0x57, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x51,
	0x5f, 0x84, 0x16, 0x0f, 0x01, 0x00, 0x00,
}

func (m *BinRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBinlog(dAtA, i, uint64(*m.Type))
	}
	if m.Table == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBinlog(dAtA, i, uint64(len(*m.Table)))
		i += copy(dAtA[i:], *m.Table)
	}
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBinlog(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if m.WritebackVersion == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBinlog(dAtA, i, uint64(*m.WritebackVersion))
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBinlog(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBinlog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BinRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovBinlog(uint64(*m.Type))
	}
	if m.Table != nil {
		l = len(*m.Table)
		n += 1 + l + sovBinlog(uint64(l))
	}
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovBinlog(uint64(l))
	}
	if m.WritebackVersion != nil {
		n += 1 + sovBinlog(uint64(*m.WritebackVersion))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovBinlog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBinlog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBinlog(x uint64) (n int) {
	return sovBinlog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BinRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: binRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: binRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v SqlType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (SqlType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Table = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritebackVersion", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WritebackVersion = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinlog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBinlog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBinlog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBinlog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBinlog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBinlog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBinlog   = fmt.Errorf("proto: integer overflow")
)
