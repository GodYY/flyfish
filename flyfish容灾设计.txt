容灾

flyfish只是一个缓存系统，所有数据最终都要落地到后端的sql数据库。

目前flyfish对更新请求的处理过程:

1) 根据table:key生成的unikey查询数据是否在本地缓存。如果没有，执行2）否则则跳到3)。
2) 将数据载入到本地。
3) 对本地数据进行修改，对修改请求产生一条binlog,将binlog交由回写处理器处理。
4) 回写处理器将binlog写入回写缓存，一旦回写缓存达到限制(大小|条目数量|刷新周期)，就像缓存持久化到磁盘。
5) 针对本次持久化的所有操作返回操作成功响应。
6) 当磁盘文件达到限制(文件大小|刷新周期),将关闭当前文件，创建新的binlog文件，通告sql回写处理器读取被刚刚关闭文件中的binlog执行sql回写。


从上面的处理过程中可以看到，一旦binlog被持久化，就会向客户端返回操作成功，如果再向sql执行回写之前flyfish崩溃，更新操作实际上是未被执行的，
当flyfish重启后，客户端再次请求这个unikey,将会从sql中载入未更新过的数据。

为了避免这种情况的发生，flyfish启动后会读取所有的binlog文件(执行过回写的binlog文件会被删除)，按顺序将binlog执行一次，保证数据变更全部回写
到sql。

因为flyfish可能在binlog文件被部分执行之后崩溃，重启之后又会重新执行一次，这样就要求对于binlog中的操作是幂等的。对于update|delete操作这不
成问题，对于insert操作,如果之前的操作执行成功，再次执行将会导致主键冲突。因此，在做binlog回放处理时,insert操作要使用insert update语句来执行。

对缓存替换的处理

当flyfish缓存的key数量达到一定限制时，flyfish将会根据lru算法选择一个key将其驱逐出内存。驱逐时需要保证的是，被选中的key其回写过程必须已经完成。
否则将可能导致数据覆盖。

由此可见，在flyfish物理机器硬盘不损坏的情况下，会客户端返回成功的更新请求，最终都可以保证回写到数据库(只要磁盘不损坏，即使原来的机器无法启动也可以将
binlog文件拷贝到正常的机器，启动flyfish执行数据回放)。


为了避免在磁盘损坏的情况下避免丢失数据，以及当物理机故障时能快速恢复服务，需要为flyfish设计一套主备容灾方案。

强一致性方案

主机将回写缓存中的binlog持久化到磁盘的同时，向备机复制缓存的内容，备机接收到缓存后同样将缓存序列化到自己的磁盘，并通告主机复制成功。主机收到半数以上(包括自己)复制
成功的消息之后向客户端返回成功响应。


对于以上方案，可以容忍最多(n/2-1)台机器的故障，响应延迟 = 缓存等待序列化的时间 + max(本地序列化时间,复制延迟)

CP:如果master无法达成n/2+1的复制，系统将不可用


最终一致性方案

主机将回写缓存中的binlog持久化到磁盘后向客户端返回成功响应，同时开始执行复制。

此方案响应时间取决于本地序列化延迟，可以容忍最多(n-1)台机器的故障，缺点是在向客户端返回响应后，复制成功前主机故障将导致部分更新丢失。

AP:系统保持高可用，但无法保证数据的一致性。


flyfish决定支持以前两个方案，由用户配置容灾等级以执行不同的方案。


架构图

     sentinel    sentinel     sentinel 

     	\           |            /
     	 ------------------------	
                    |
         ------------------------           	
        /           |            \ 
flyfish(master) flyfish(slave) flyfish(slave)


sentinel负责监控flyfish节点，当超过半数以上sentinel判定master出现故障，将在sentinel中执行leader选举，由选出的leader完成故障转移(选择新的flyfish master)。


binlog及其同步

flyfish的每一个操作产生一条binlog,里面包含了unikey,操作类型，变更值。binlog被序列化到内存缓冲区，当缓冲区满|超过一定的条目|到达刷新时间,缓冲区中的内容被持久化到文件。
对于单机模式，可以对这些持久化的操作返回应答。当binlog文件达到一定大小或超过刷新时间，将关闭当前binlog文件，创建新的文件以用于后续的序列化，同时通知sql处理器读取并执行
binlog中的操作，一旦所有操作都执行完,binlog文件就可以被删除（对于主备模式，需要将文件id通知到slave节点，让slave节点将响应文件删除）。

binlog文件的命名规则

flyfish被分成不同的处理单元，unikey被固定hash到不同的处理单元处理，每个处理单元执行同样的流程，binlog文件的命名规则是prefix_id.bin，其中prefix由配置文件控，id为64位单调递增计数器。

binlog文件重放

对binlog文件id排序，按从小到大的顺序执行即可保证操作按序执行。


binlog同步

binlog缓冲达到条件后向从机同步，内容包括,缓冲区的内容本身以及id。副本节点收到不同内容分以下几种情况:


1) 副本节点当前没有任何binlog文件：根据id创建新的binlog文件，将内容写入文件。

2) id与当前打开文件一致：将内容写入文件。

3) id比当前打开文件大：关闭当前文件，创建新文件并写入。

4）id比当前记录到的最大id小：这种情况表明,master重启或切换了master,master重放了所有未执行完的binlog文件,id归0。slave要关闭自己当前文件，并删除所有之前保存到磁盘中
的binlog文件,用最新id创建并打开文件，将binlog内容写入文件。

